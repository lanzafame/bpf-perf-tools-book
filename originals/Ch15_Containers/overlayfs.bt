#!/usr/bin/env bpftrace
/*
 * overlayfs - Show overlay FS read and write latency.
 *
 * See BPF Performance Tools, Chapter 15, for an explanation of this tool.
 *
 * Copyright (c) 2019 Jason Koch.
 * Licensed under the Apache License, Version 2.0 (the "License").
 * This was originally created for the BPF Performance Tools book
 * published by Addison Wesley. ISBN-13: 9780136554820
 * When copying or porting, include this comment.
 */

#include <linux/nsproxy.h>
#include <linux/pid_namespace.h>

kprobe:ovl_read_iter
/((struct task_struct *)curtask)->nsproxy->pid_ns_for_children->ns.inum == $1/
{
	@read_start[tid] = nsecs;
}

kretprobe:ovl_read_iter
/((struct task_struct *)curtask)->nsproxy->pid_ns_for_children->ns.inum == $1/
{
	$duration_us = (nsecs - @read_start[tid]) / 1000;
	@read_latency_us = hist($duration_us);
	delete(@read_start[tid]);
}

kprobe:ovl_write_iter
/((struct task_struct *)curtask)->nsproxy->pid_ns_for_children->ns.inum == $1/
{
	@write_start[tid] = nsecs;
}

kretprobe:ovl_write_iter
/((struct task_struct *)curtask)->nsproxy->pid_ns_for_children->ns.inum == $1/
{
	$duration_us = (nsecs - @write_start[tid]) / 1000;
	@write_latency_us = hist($duration_us);
	delete(@write_start[tid]);
}

interval:ms:1000
{
	time("\n%H:%M:%S --------------------\n");
	print(@write_latency_us);
	print(@read_latency_us);
	clear(@write_latency_us);
	clear(@read_latency_us);
}

END
{
	clear(@write_start);
	clear(@read_start);
}
